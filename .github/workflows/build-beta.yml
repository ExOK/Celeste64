name: Build and publish beta branch

on:
  workflow_dispatch:
  push:
    branches: [ 'monomod' ]
    paths-ignore:
      - "README.md"
      - ".gitignore"
      - ".editorconfig"

permissions:
  contents: write

jobs:
  build:    
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
    
    runs-on: ${{ matrix.platform }}
    steps:
    - uses: actions/checkout@v3
    - name: Fetch all tags
      run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Get current short hash
      id: vars
      run: echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> "$env:GITHUB_OUTPUT"
      if: runner.os == 'Windows'
    - name : Get Short Hash Linux
      run: |
        calculatedSha=$(git rev-parse --short ${{ github.sha }})
        echo "SHORT_SHA=$calculatedSha" >> $GITHUB_ENV
      if: runner.os != 'Windows'
    - name: echo short hash
      run: echo "Short SHA is ${{ env.SHORT_SHA }}"
      if: runner.os == 'Windows'
    - name: echo short hash
      run: echo "Short SHA is $SHORT_SHA"
      if: runner.os != 'Windows'
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x

    - name: Build (linux)
      env:
        os: ${{ runner.os == 'linux' }}
      run: |
        cd Celeste64Launcher/ && dotnet publish -p:PublishProfile=LinuxProfile -p:ImportByWildcardBeforeSolution=false "-p:EmbeddedBuildProperty=ModVersion=${{ env.SHORT_SHA }}" -o ../build && cd ../ && cp -r Content Mods build
      if: runner.os == 'linux'
    - name: Build (macOS)
      env:
        os: ${{ runner.os == 'macOS' && 'osx' }}
      run: |
        cd Celeste64Launcher/ && dotnet publish -P:PublishProfile=MacOSProfile -p:ImportByWildcardBeforeSolution=false "-p:EmbeddedBuildProperty=ModVersion=${{ env.SHORT_SHA }}" -o ../build && cd ../ && cp -r Content Mods build
      if: runner.os == 'macOS'
    - name: Build (windows)
      env:
        os: ${{ runner.os == 'Windows' && 'win' }}
      run: |
        cd Celeste64Launcher/ && dotnet publish /p:PublishProfile=WindowsProfile -p:ImportByWildcardBeforeSolution=false "-p:EmbeddedBuildProperty=ModVersion=${{steps.vars.outputs.SHORT_SHA}}" -o ..\build && cd ..\ && xcopy Mods build\Mods /s /e /h /i /y && xcopy Content build\Content /s /e /h /i /y
      if: runner.os == 'Windows'

    - name: Compress (Windows)
      run: |
        Compress-Archive build/* Celeste64-Fuji-${{ runner.os }}-x64.zip
      if: runner.os == 'Windows'
    
    - name: Compress (macOS and Linux)
      run: |
        cd build && zip -r ../Celeste64-Fuji-${{ runner.os }}-x64.zip *
      if: runner.os != 'Windows'
      
    - name: Publish Github Release Windows
      uses: ncipollo/release-action@v1
      with:
        artifacts: Celeste64-Fuji-${{ runner.os }}-x64.zip
        tag: "beta-${{steps.vars.outputs.SHORT_SHA}}"
        body: |
          # Instructions:

          - Download and extract the zip file below according to your computer
          - Run the Celeste64 application from the extracted files

          # Requirements:

          - **Windows:** 10 or later, x64
          - **Linux:** [Distro support list](https://github.com/dotnet/core/blob/main/release-notes/8.0/supported-os.md), x64
          - **macOS:** Monterey or later, x64 Intel-based or Apple Silicon with Rosetta
        allowUpdates: true
        name: "Fuji Beta Build ${{steps.vars.outputs.SHORT_SHA}}"
        prerelease: true
        makeLatest: false
        commit: "${{ github.sha }}"
      if: runner.os == 'Windows'

    - name: Publish Github Release Linux and Mac
      uses: ncipollo/release-action@v1
      with:
        artifacts: Celeste64-Fuji-${{ runner.os }}-x64.zip
        tag: "beta-${{ env.SHORT_SHA }}"
        body: |
          # Instructions:

          - Download and extract the zip file below according to your computer
          - Run the Celeste64 application from the extracted files

          # Requirements:

          - **Windows:** 10 or later, x64
          - **Linux:** [Distro support list](https://github.com/dotnet/core/blob/main/release-notes/8.0/supported-os.md), x64
          - **macOS:** Monterey or later, x64 Intel-based or Apple Silicon with Rosetta
        allowUpdates: true
        name: "Fuji Beta Build ${{ env.SHORT_SHA }}"
        prerelease: true
        makeLatest: false
        draft: true
        commit: "${{ github.sha }}"
      if: runner.os != 'Windows'
